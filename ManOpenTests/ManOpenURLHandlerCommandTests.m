//
//  ManOpenURLHandlerCommandTests.m
//  ManOpenTests
//
//  Created by Don McCaughey on 11/9/17.
//

#import <XCTest/XCTest.h>
#import "ManOpenURLHandlerCommand.h"
#import "MockManDocumentController.h"


@interface ManOpenURLHandlerCommandTests : XCTestCase

@property (retain) ManOpenURLHandlerCommand *command;
@property (retain) MockManDocumentController *mockManDocumentController;

@end


@implementation ManOpenURLHandlerCommandTests

#pragma mark - x-man-page: scheme

- (void)test_x_man_page_scheme
{
    _command.directParameter = @"x-man-page://grep";
    
    [_command performDefaultImplementation];
    
    XCTAssertFalse(_mockManDocumentController.openAproposManPathForceToFront_was_called);
    XCTAssertFalse(_mockManDocumentController.openFile_was_called);
    
    XCTAssertEqual(1, _mockManDocumentController.openNameSectionManPathForceToFront_calls.count);
    NSArray *firstCall = _mockManDocumentController.openNameSectionManPathForceToFront_calls.firstObject;
    XCTAssertEqualObjects(@"grep", [firstCall objectAtIndex:0]);
    XCTAssertEqualObjects([NSNull null], [firstCall objectAtIndex:1]);
    XCTAssertEqualObjects([NSNull null], [firstCall objectAtIndex:2]);
    XCTAssertEqualObjects(@(YES), [firstCall objectAtIndex:3]);
}

- (void)test_x_man_page_scheme_with_multiple_pages
{
    _command.directParameter = @"x-man-page://1/grep/printf/2/open";
    
    [_command performDefaultImplementation];
    
    XCTAssertFalse(_mockManDocumentController.openAproposManPathForceToFront_was_called);
    XCTAssertFalse(_mockManDocumentController.openFile_was_called);
    
    XCTAssertEqual(3, _mockManDocumentController.openNameSectionManPathForceToFront_calls.count);
    
    NSArray *firstCall = _mockManDocumentController.openNameSectionManPathForceToFront_calls.firstObject;
    XCTAssertEqualObjects(@"grep", [firstCall objectAtIndex:0]);
    XCTAssertEqualObjects(@"1", [firstCall objectAtIndex:1]);
    XCTAssertEqualObjects([NSNull null], [firstCall objectAtIndex:2]);
    XCTAssertEqualObjects(@(YES), [firstCall objectAtIndex:3]);
    
    NSArray *secondCall = [_mockManDocumentController.openNameSectionManPathForceToFront_calls objectAtIndex:1];
    XCTAssertEqualObjects(@"printf", [secondCall objectAtIndex:0]);
    XCTAssertEqualObjects([NSNull null], [secondCall objectAtIndex:1]);
    XCTAssertEqualObjects([NSNull null], [secondCall objectAtIndex:2]);
    XCTAssertEqualObjects(@(YES), [secondCall objectAtIndex:3]);
    
    NSArray *thirdCall = [_mockManDocumentController.openNameSectionManPathForceToFront_calls objectAtIndex:2];
    XCTAssertEqualObjects(@"open", [thirdCall objectAtIndex:0]);
    XCTAssertEqualObjects(@"2", [thirdCall objectAtIndex:1]);
    XCTAssertEqualObjects([NSNull null], [thirdCall objectAtIndex:2]);
    XCTAssertEqualObjects(@(YES), [thirdCall objectAtIndex:3]);
}

- (void)test_x_man_page_scheme_with_apropos_keyword
{
    _command.directParameter = @"x-man-page://print;type=a";
    
    [_command performDefaultImplementation];
    
    XCTAssertFalse(_mockManDocumentController.openFile_was_called);
    XCTAssertEqual(0, _mockManDocumentController.openNameSectionManPathForceToFront_calls.count);
    
    XCTAssertTrue(_mockManDocumentController.openAproposManPathForceToFront_was_called);
    XCTAssertEqualObjects(@"print", _mockManDocumentController.openAproposManPathForceToFront_apropos);
    XCTAssertNil(_mockManDocumentController.openAproposManPathForceToFront_manPath);
    XCTAssertTrue(_mockManDocumentController.openAproposManPathForceToFront_force);
}

#pragma mark - file: scheme

- (void)test_file_scheme
{
    _command.directParameter = @"file:///usr/share/man/man1/basename.1";
    
    [_command performDefaultImplementation];
    
    XCTAssertFalse(_mockManDocumentController.openAproposManPathForceToFront_was_called);
    XCTAssertEqual(0, _mockManDocumentController.openNameSectionManPathForceToFront_calls.count);

    XCTAssertTrue(_mockManDocumentController.openFile_was_called);
    XCTAssertEqualObjects(@"/usr/share/man/man1/basename.1",
                          _mockManDocumentController.openFile_filename);
    XCTAssertTrue(_mockManDocumentController.openFile_force);
}

- (void)test_file_scheme_with_remote_host
{
    _command.directParameter = @"file://www.example.com/usr/share/man/man6/banner.6";
    
    [_command performDefaultImplementation];
    
    XCTAssertFalse(_mockManDocumentController.openAproposManPathForceToFront_was_called);
    XCTAssertFalse(_mockManDocumentController.openFile_was_called);
    XCTAssertEqual(0, _mockManDocumentController.openNameSectionManPathForceToFront_calls.count);
}

- (void)test_file_scheme_with_relative_path
{
    _command.directParameter = @"file:usr/share/man/man8/arp.8";
    
    [_command performDefaultImplementation];
    
    XCTAssertFalse(_mockManDocumentController.openAproposManPathForceToFront_was_called);
    XCTAssertFalse(_mockManDocumentController.openFile_was_called);
    XCTAssertEqual(0, _mockManDocumentController.openNameSectionManPathForceToFront_calls.count);
}

#pragma mark - manopen: scheme

- (void)test_manopen_scheme_with_man_page
{
    _command.directParameter = @"manopen://3/printf";
    
    [_command performDefaultImplementation];
    
    XCTAssertFalse(_mockManDocumentController.openAproposManPathForceToFront_was_called);
    XCTAssertFalse(_mockManDocumentController.openFile_was_called);
    
    XCTAssertEqual(1, _mockManDocumentController.openNameSectionManPathForceToFront_calls.count);
    NSArray *firstCall = _mockManDocumentController.openNameSectionManPathForceToFront_calls.firstObject;
    XCTAssertEqualObjects(@"printf", [firstCall objectAtIndex:0]);
    XCTAssertEqualObjects(@"3", [firstCall objectAtIndex:1]);
    XCTAssertEqualObjects([NSNull null], [firstCall objectAtIndex:2]);
    XCTAssertEqualObjects(@(YES), [firstCall objectAtIndex:3]);
}

- (void)test_manopen_scheme_with_man_page_with_query_parameters
{
    _command.directParameter = @"manopen:///mkfifo?background=true&MANPATH=/usr/share:/usr/man";
    
    [_command performDefaultImplementation];
    
    XCTAssertFalse(_mockManDocumentController.openAproposManPathForceToFront_was_called);
    XCTAssertFalse(_mockManDocumentController.openFile_was_called);
    
    XCTAssertEqual(1, _mockManDocumentController.openNameSectionManPathForceToFront_calls.count);
    NSArray *firstCall = _mockManDocumentController.openNameSectionManPathForceToFront_calls.firstObject;
    XCTAssertEqualObjects(@"mkfifo", [firstCall objectAtIndex:0]);
    XCTAssertEqualObjects([NSNull null], [firstCall objectAtIndex:1]);
    XCTAssertEqualObjects(@"/usr/share:/usr/man", [firstCall objectAtIndex:2]);
    XCTAssertEqualObjects(@(NO), [firstCall objectAtIndex:3]);
}

- (void)test_manopen_scheme_with_apropos_search
{
    _command.directParameter = @"manopen://apropos/edit";
    
    [_command performDefaultImplementation];
    
    XCTAssertFalse(_mockManDocumentController.openFile_was_called);
    XCTAssertEqual(0, _mockManDocumentController.openNameSectionManPathForceToFront_calls.count);
    
    XCTAssertTrue(_mockManDocumentController.openAproposManPathForceToFront_was_called);
    XCTAssertEqualObjects(@"edit", _mockManDocumentController.openAproposManPathForceToFront_apropos);
    XCTAssertNil(_mockManDocumentController.openAproposManPathForceToFront_manPath);
    XCTAssertTrue(_mockManDocumentController.openAproposManPathForceToFront_force);
}

- (void)test_manopen_scheme_with_apropos_search_with_query_parameters
{
    _command.directParameter = @"manopen://apropos/route?background=true&MANPATH=/usr/share:/usr/man";
    
    [_command performDefaultImplementation];
    
    XCTAssertFalse(_mockManDocumentController.openFile_was_called);
    XCTAssertEqual(0, _mockManDocumentController.openNameSectionManPathForceToFront_calls.count);
    
    XCTAssertTrue(_mockManDocumentController.openAproposManPathForceToFront_was_called);
    XCTAssertEqualObjects(@"route", _mockManDocumentController.openAproposManPathForceToFront_apropos);
    XCTAssertEqualObjects(@"/usr/share:/usr/man", _mockManDocumentController.openAproposManPathForceToFront_manPath);
    XCTAssertFalse(_mockManDocumentController.openAproposManPathForceToFront_force);
}

- (void)test_manopen_scheme_with_file_path
{
    _command.directParameter = @"manopen:/usr/share/man/man1/wget.1";
    
    [_command performDefaultImplementation];
    
    XCTAssertFalse(_mockManDocumentController.openAproposManPathForceToFront_was_called);
    XCTAssertEqual(0, _mockManDocumentController.openNameSectionManPathForceToFront_calls.count);
    
    XCTAssertTrue(_mockManDocumentController.openFile_was_called);
    XCTAssertEqualObjects(@"/usr/share/man/man1/wget.1",
                          _mockManDocumentController.openFile_filename);
    XCTAssertTrue(_mockManDocumentController.openFile_force);
}

- (void)test_manopen_scheme_with_file_path_in_background
{
    _command.directParameter = @"manopen:/usr/share/man/man8/nginx.8?background=true";
    
    [_command performDefaultImplementation];
    
    XCTAssertFalse(_mockManDocumentController.openAproposManPathForceToFront_was_called);
    XCTAssertEqual(0, _mockManDocumentController.openNameSectionManPathForceToFront_calls.count);
    
    XCTAssertTrue(_mockManDocumentController.openFile_was_called);
    XCTAssertEqualObjects(@"/usr/share/man/man8/nginx.8",
                          _mockManDocumentController.openFile_filename);
    XCTAssertFalse(_mockManDocumentController.openFile_force);
}

#pragma mark - unsupported scheme

- (void)test_unsupported_scheme
{
    _command.directParameter = @"http://www.example.com/index.html";
    
    [_command performDefaultImplementation];
    
    XCTAssertFalse(_mockManDocumentController.openAproposManPathForceToFront_was_called);
    XCTAssertFalse(_mockManDocumentController.openFile_was_called);
}

#pragma mark -

- (void)setUp
{
    [super setUp];
    _mockManDocumentController = [MockManDocumentController new];
    _command = [ManOpenURLHandlerCommand new];
    _command.manDocumentController = (ManDocumentController *)_mockManDocumentController;
}

- (void)tearDown
{
    [super tearDown];
    [_command release];
    [_mockManDocumentController release];
}

@end
