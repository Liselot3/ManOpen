//
//  ManOpenURLHandlerCommandTests.m
//  ManOpenTests
//
//  Created by Don McCaughey on 11/9/17.
//

#import <XCTest/XCTest.h>
#import "ManOpenURLHandlerCommand.h"
#import "MockManDocumentController.h"


#define ASSERT_OPEN_APROPOS_FOR_URL_STRING(OPEN_APROPOS, URL_STRING) \
    [self assertCommandCallsOpenAproposWithApropos:(OPEN_APROPOS) \
                                      forURLString:(URL_STRING) \
                                            inFile:__FILE__ \
                                            atLine:__LINE__];

#define ASSERT_OPEN_FILE_FOR_URL_STRING(OPEN_FILE, URL_STRING) \
    [self assertCommandCallsOpenFileWithFilename:(OPEN_FILE) \
                                    forURLString:(URL_STRING) \
                                          inFile:__FILE__ \
                                          atLine:__LINE__];

#define ASSERT_OPEN_STRING_FOR_URL_STRING(OPEN_STRING, URL_STRING) \
    [self assertCommandCallsOpenStringWithString:(OPEN_STRING) \
                                    forURLString:(URL_STRING) \
                                          inFile:__FILE__ \
                                          atLine:__LINE__];

#define ASSERT_NO_ACTION_FOR_URL_STRING(URL_STRING) \
    [self assertCommandDoesNothingForURLString:(URL_STRING) \
                                        inFile:__FILE__ \
                                        atLine:__LINE__];


@interface ManOpenURLHandlerCommandTests : XCTestCase
@end


@implementation ManOpenURLHandlerCommandTests

- (void)test_x_man_page_scheme
{
    // standard form
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"grep", @"x-man-page://grep");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"grep(1)", @"x-man-page://1/grep");
    
    // varying slashes
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"printf(3)", @"x-man-page:3/printf");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"basename", @"x-man-page:/basename");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"ed", @"x-man-page://ed/");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"open(2)", @"x-man-page:///2/open");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"close(2)", @"x-man-page:///2/close/");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"sh", @"x-man-page:///sh//");

    // section n
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"Tcl(n)", @"x-man-page://n/Tcl");
    
    // name begins with a digit
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"2to3", @"x-man-page://2to3");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"2to3(7)", @"x-man-page://7/2to3");
    
    // multiple names
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"grep printf", @"x-man-page://grep/printf");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"grep(1) printf(3)", @"x-man-page://1/grep/3/printf");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"grep(1) printf open(2)", @"x-man-page://1/grep/printf/2/open");
    
    // scheme capitalization
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"find", @"X-MAN-PAGE://find");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"find(1)", @"X-Man-Page://1/find");
    
    // missing parts
    ASSERT_NO_ACTION_FOR_URL_STRING(@"x-man-page://");
    ASSERT_NO_ACTION_FOR_URL_STRING(@"x-man-page:");
    ASSERT_NO_ACTION_FOR_URL_STRING(@"x-man-page");
}

- (void)test_x_man_page_scheme_for_apropos
{
    // standard form
    ASSERT_OPEN_APROPOS_FOR_URL_STRING(@"print", @"x-man-page://print;type=a");
    ASSERT_OPEN_APROPOS_FOR_URL_STRING(@"print", @"x-man-page://5/print;type=a");
    
    // varying slashes
    ASSERT_OPEN_APROPOS_FOR_URL_STRING(@"send", @"x-man-page:/send;type=a");
    ASSERT_OPEN_APROPOS_FOR_URL_STRING(@"name", @"x-man-page:///name;type=a");
    ASSERT_OPEN_APROPOS_FOR_URL_STRING(@"file", @"x-man-page:///2/file;type=a");
    
    // multiple names
    ASSERT_OPEN_APROPOS_FOR_URL_STRING(@"save", @"x-man-page:/save/ignored;type=a");
    ASSERT_OPEN_APROPOS_FOR_URL_STRING(@"open", @"x-man-page://1/open/ignored;type=a");
    
    // keyword begins with a digit
    ASSERT_OPEN_APROPOS_FOR_URL_STRING(@"2p", @"x-man-page://1/2p;type=a");
    ASSERT_OPEN_APROPOS_FOR_URL_STRING(@"2p", @"x-man-page://2p;type=a");

    // missing parts
    ASSERT_NO_ACTION_FOR_URL_STRING(@"x-man-page://;type=a");
    ASSERT_NO_ACTION_FOR_URL_STRING(@"x-man-page:;type=a");
}

- (void)test_file_scheme
{
    // standard form
    ASSERT_OPEN_FILE_FOR_URL_STRING(@"/usr/share/man/man1/basename.1",
                                    @"file:///usr/share/man/man1/basename.1");
    
    // scheme capitalization
    ASSERT_OPEN_FILE_FOR_URL_STRING(@"/usr/share/man/man4/unix.4",
                                    @"FILE:///usr/share/man/man4/unix.4");
    ASSERT_OPEN_FILE_FOR_URL_STRING(@"/usr/share/man/man5/types.5",
                                    @"File:///usr/share/man/man5/types.5");
    
    // localhost
    ASSERT_OPEN_FILE_FOR_URL_STRING(@"/usr/share/man/man6/banner.6",
                                    @"file://localhost/usr/share/man/man6/banner.6");
    ASSERT_OPEN_FILE_FOR_URL_STRING(@"/usr/share/man/man8/arp.8",
                                    @"file://LOCALHOST/usr/share/man/man8/arp.8");

    // other host
    ASSERT_NO_ACTION_FOR_URL_STRING(@"file://www.example.com/usr/share/man/man6/banner.6");
    ASSERT_NO_ACTION_FOR_URL_STRING(@"file://usr/share/man/man7/mdoc.7");

    // no host part
    ASSERT_OPEN_FILE_FOR_URL_STRING(@"/usr/share/man/man7/mdoc.7",
                                    @"file:/usr/share/man/man7/mdoc.7");
    
    // missing parts
    ASSERT_NO_ACTION_FOR_URL_STRING(@"file:///");
    ASSERT_NO_ACTION_FOR_URL_STRING(@"file://localhost/");
    ASSERT_NO_ACTION_FOR_URL_STRING(@"file://");
    ASSERT_NO_ACTION_FOR_URL_STRING(@"file:/");
    ASSERT_NO_ACTION_FOR_URL_STRING(@"file:usr/share/man/man8/arp.8");
    ASSERT_NO_ACTION_FOR_URL_STRING(@"file:");
}

- (void)test_unsupported_schemes
{
    ASSERT_NO_ACTION_FOR_URL_STRING(@"ftp://ftp.example.com/some/file.txt");
    ASSERT_NO_ACTION_FOR_URL_STRING(@"http://www.example.com/index.html");
}

#pragma mark -

- (void)assertCommandCallsOpenAproposWithApropos:(NSString *)openApropos
                                    forURLString:(NSString *)urlString
                                          inFile:(char const *)file
                                          atLine:(int)line
{
    ManOpenURLHandlerCommand *command = [[ManOpenURLHandlerCommand new] autorelease];
    MockManDocumentController *mockManDocumentController = [[MockManDocumentController new] autorelease];
    command.manDocumentController = (ManDocumentController *)mockManDocumentController;
    command.directParameter = urlString;
    
    [command performDefaultImplementation];
    
    if (!mockManDocumentController.openApropos_was_called) {
        _XCTFailureHandler(self, YES, file, line, @"-openApropos: not called", @"");
    }
    
    if (mockManDocumentController.openFile_was_called) {
        _XCTFailureHandler(self, YES, file, line, @"-openFile:forceToFront: called",
                           @"filename argument was \"%@\"",
                           mockManDocumentController.openFile_filename);
        return;
    }

    if (mockManDocumentController.openString_was_called) {
        _XCTFailureHandler(self, YES, file, line, @"-openString: called",
                           @"string argument was \"%@\"",
                           mockManDocumentController.openString_string);
        return;
    }
    
    if (openApropos == mockManDocumentController.openApropos_apropos) {
        return;
    }
    
    if ([openApropos isEqualToString:mockManDocumentController.openApropos_apropos]) {
        return;
    }
    
    _XCTFailureHandler(self, YES, file, line, @"-openApropos: failed",
                       @"\"%@\" not equal to \"%@\".",
                       openApropos, mockManDocumentController.openApropos_apropos);
}

- (void)assertCommandCallsOpenFileWithFilename:(NSString *)openFilename
                                  forURLString:(NSString *)urlString
                                        inFile:(char const *)file
                                        atLine:(int)line
{
    ManOpenURLHandlerCommand *command = [[ManOpenURLHandlerCommand new] autorelease];
    MockManDocumentController *mockManDocumentController = [[MockManDocumentController new] autorelease];
    command.manDocumentController = (ManDocumentController *)mockManDocumentController;
    command.directParameter = urlString;
    
    [command performDefaultImplementation];
    
    if (mockManDocumentController.openApropos_was_called) {
        _XCTFailureHandler(self, YES, file, line, @"-openApropos: called",
                           @"apropos argument was \"%@\"",
                           mockManDocumentController.openApropos_apropos);
    }
    
    if (!mockManDocumentController.openFile_was_called) {
        _XCTFailureHandler(self, YES, file, line, @"-openFile:forceToFront: not called", @"");
        return;
    }

    if (mockManDocumentController.openString_was_called) {
        _XCTFailureHandler(self, YES, file, line, @"-openString: called",
                           @"string argument was \"%@\"",
                           mockManDocumentController.openString_string);
        return;
    }
    
    if (openFilename != mockManDocumentController.openFile_filename
        && ![openFilename isEqualToString:mockManDocumentController.openFile_filename])
    {
        _XCTFailureHandler(self, YES, file, line, @"-openFile:forceToFront: failed",
                           @"filename \"%@\" not equal to \"%@\".",
                           openFilename, mockManDocumentController.openFile_filename);
    }
    
    if (!mockManDocumentController.openFile_force) {
        _XCTFailureHandler(self, YES, file, line, @"-openFile:forceToFront: failed",
                           @"force is not YES");
    }
}

- (void)assertCommandCallsOpenStringWithString:(NSString *)openString
                                  forURLString:(NSString *)urlString
                                        inFile:(char const *)file
                                        atLine:(int)line
{
    ManOpenURLHandlerCommand *command = [[ManOpenURLHandlerCommand new] autorelease];
    MockManDocumentController *mockManDocumentController = [[MockManDocumentController new] autorelease];
    command.manDocumentController = (ManDocumentController *)mockManDocumentController;
    command.directParameter = urlString;
    
    [command performDefaultImplementation];
    
    if (mockManDocumentController.openApropos_was_called) {
        _XCTFailureHandler(self, YES, file, line, @"-openApropos: called",
                           @"apropos argument was \"%@\"",
                           mockManDocumentController.openApropos_apropos);
    }
    
    if (mockManDocumentController.openFile_was_called) {
        _XCTFailureHandler(self, YES, file, line, @"-openFile:forceToFront: called",
                           @"filename argument was \"%@\"",
                           mockManDocumentController.openFile_filename);
        return;
    }
    
    if (!mockManDocumentController.openString_was_called) {
        _XCTFailureHandler(self, YES, file, line, @"-openString: not called", @"");
        return;
    }
    
    if (openString == mockManDocumentController.openString_string) {
        return;
    }
    
    if ([openString isEqualToString:mockManDocumentController.openString_string]) {
        return;
    }
    
    _XCTFailureHandler(self, YES, file, line, @"-openString: failed",
                       @"\"%@\" not equal to \"%@\".",
                       openString, mockManDocumentController.openString_string);
}

- (void)assertCommandDoesNothingForURLString:(NSString *)urlString
                                      inFile:(char const *)file
                                      atLine:(int)line
{
    ManOpenURLHandlerCommand *command = [[ManOpenURLHandlerCommand new] autorelease];
    MockManDocumentController *mockManDocumentController = [[MockManDocumentController new] autorelease];
    command.manDocumentController = (ManDocumentController *)mockManDocumentController;
    command.directParameter = urlString;
    
    [command performDefaultImplementation];
    
    if (mockManDocumentController.openApropos_was_called) {
        _XCTFailureHandler(self, YES, file, line, @"-openApropos: called",
                           @"apropos argument was \"%@\"",
                           mockManDocumentController.openApropos_apropos);
    }
    
    if (mockManDocumentController.openFile_was_called) {
        _XCTFailureHandler(self, YES, file, line, @"-openFile:forceToFront: called",
                           @"filename argument was \"%@\"",
                           mockManDocumentController.openFile_filename);
    }
    
    if (mockManDocumentController.openString_was_called) {
        _XCTFailureHandler(self, YES, file, line, @"-openString: called",
                           @"string argument was \"%@\"",
                           mockManDocumentController.openString_string);
    }
}

@end
