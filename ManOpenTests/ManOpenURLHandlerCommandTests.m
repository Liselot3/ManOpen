//
//  ManOpenURLHandlerCommandTests.m
//  ManOpenTests
//
//  Created by Don McCaughey on 11/9/17.
//

#import <XCTest/XCTest.h>
#import "ManOpenURLHandlerCommand.h"
#import "MockManDocumentController.h"


#define ASSERT_OPEN_STRING_FOR_URL_STRING(OPEN_STRING, URL_STRING) \
    [self assertCommandCallsOpenStringWithString:(OPEN_STRING) \
                                    forURLString:(URL_STRING) \
                                          inFile:__FILE__ \
                                          atLine:__LINE__];

#define ASSERT_NOT_OPEN_STRING_FOR_URL_STRING(URL_STRING) \
    [self assertCommandDoesNotCallOpenStringForURLString:(URL_STRING) \
                                                  inFile:__FILE__ \
                                                  atLine:__LINE__];


@interface ManOpenURLHandlerCommandTests : XCTestCase
@end


@implementation ManOpenURLHandlerCommandTests

- (void)test_x_man_page_scheme
{
    // standard form
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"grep", @"x-man-page://grep");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"grep (1)", @"x-man-page://1/grep");
    
    // varying slashes
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"printf (3)", @"x-man-page:3/printf");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"basename", @"x-man-page:/basename");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"open (2)", @"x-man-page:///2/open");
    
    // section n
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"Tcl (n)", @"x-man-page://n/Tcl");
    
    // multiple names
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"grep printf", @"x-man-page://grep/printf");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"grep (1) printf (3)", @"x-man-page://1/grep/3/printf");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"grep (1) printf open (2)", @"x-man-page://1/grep/printf/2/open");
    
    // scheme capitalization
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"find", @"X-MAN-PAGE://find");
    ASSERT_OPEN_STRING_FOR_URL_STRING(@"find (1)", @"X-Man-Page://1/find");
    
    // missing parts
    ASSERT_NOT_OPEN_STRING_FOR_URL_STRING(@"x-man-page://1/");
    ASSERT_NOT_OPEN_STRING_FOR_URL_STRING(@"x-man-page://2");
    ASSERT_NOT_OPEN_STRING_FOR_URL_STRING(@"x-man-page://");
    ASSERT_NOT_OPEN_STRING_FOR_URL_STRING(@"x-man-page:");
    ASSERT_NOT_OPEN_STRING_FOR_URL_STRING(@"x-man-page");
}

- (void)test_unsupported_schemes
{
    ASSERT_NOT_OPEN_STRING_FOR_URL_STRING(@"ftp://ftp.example.com/some/file.txt");
    ASSERT_NOT_OPEN_STRING_FOR_URL_STRING(@"http://www.example.com/index.html");
}

#pragma mark -

- (void)assertCommandCallsOpenStringWithString:(NSString *)openString
                                  forURLString:(NSString *)urlString
                                        inFile:(char const *)file
                                        atLine:(int)line
{
    ManOpenURLHandlerCommand *command = [[ManOpenURLHandlerCommand new] autorelease];
    MockManDocumentController *mockManDocumentController = [[MockManDocumentController new] autorelease];
    command.manDocumentController = (ManDocumentController *)mockManDocumentController;
    command.directParameter = urlString;
    
    [command performDefaultImplementation];
    
    if (!mockManDocumentController.openString_was_called) {
        _XCTFailureHandler(self, YES, file, line, @"-openString: not called", @"");
        return;
    }
    
    if (openString == mockManDocumentController.openString_string) {
        return;
    }
    
    if ([openString isEqualToString:mockManDocumentController.openString_string]) {
        return;
    }
    
    _XCTFailureHandler(self, YES, file, line, @"-openString: failed",
                       @"\"%@\" not equal to \"%@\".",
                       openString, mockManDocumentController.openString_string);
}

- (void)assertCommandDoesNotCallOpenStringForURLString:(NSString *)urlString
                                                inFile:(char const *)file
                                                atLine:(int)line
{
    ManOpenURLHandlerCommand *command = [[ManOpenURLHandlerCommand new] autorelease];
    MockManDocumentController *mockManDocumentController = [[MockManDocumentController new] autorelease];
    command.manDocumentController = (ManDocumentController *)mockManDocumentController;
    command.directParameter = urlString;
    
    [command performDefaultImplementation];
    
    if (mockManDocumentController.openString_was_called) {
        _XCTFailureHandler(self, YES, file, line, @"-openString: called",
                           @"string argument was \"%@\"", mockManDocumentController.openString_string);
        return;
    }
}

@end
