//
//  NSUserDefaults+ManOpenPreferencesTests.m
//  ManOpenTests
//
//  Created by Don McCaughey on 2/10/18.
//

#import <XCTest/XCTest.h>
#import "NSUserDefaults+ManOpen.h"


@interface NSUserDefaults_ManOpenPreferencesTests : XCTestCase

@property (retain) NSUserDefaults *defaults;

@end


@implementation NSUserDefaults_ManOpenPreferencesTests

#pragma mark - colors

- (void)testManTextColor
{
    NSData *redData = [NSArchiver archivedDataWithRootObject:[NSColor systemRedColor]];
    [_defaults setObject:redData forKey:@"ManTextColor"];
    NSColor *textColor = [_defaults manTextColor];
    XCTAssertEqualObjects([NSColor systemRedColor], textColor);
}

- (void)testManTextColor_when_nil
{
    [_defaults removeObjectForKey:@"ManTextColor"];
    NSColor *textColor = [_defaults manTextColor];
    XCTAssertEqualObjects([NSColor textColor], textColor);
}

- (void)testManLinkColor
{
    NSData *redData = [NSArchiver archivedDataWithRootObject:[NSColor systemRedColor]];
    [_defaults setObject:redData forKey:@"ManLinkColor"];
    NSColor *linkColor = [_defaults manLinkColor];
    XCTAssertEqualObjects([NSColor systemRedColor], linkColor);
}

- (void)testManLinkColor_when_nil
{
    [_defaults removeObjectForKey:@"ManLinkColor"];
    NSColor *linkColor = [_defaults manLinkColor];
    NSColor *expectedColor = [NSColor colorWithDeviceRed:0.1f green:0.1f blue:1.0f alpha:1.0f];
    XCTAssertEqualObjects(expectedColor, linkColor);
}

- (void)testManBackgroundColor
{
    NSData *redData = [NSArchiver archivedDataWithRootObject:[NSColor systemRedColor]];
    [_defaults setObject:redData forKey:@"ManBackgroundColor"];
    NSColor *backgroundColor = [_defaults manBackgroundColor];
    XCTAssertEqualObjects([NSColor systemRedColor], backgroundColor);
}

- (void)testManBackgroundColor_when_nil
{
    [_defaults removeObjectForKey:@"ManBackgroundColor"];
    NSColor *backgroundColor = [_defaults manBackgroundColor];
    XCTAssertEqualObjects([NSColor textBackgroundColor], backgroundColor);
}

#pragma mark - manFont

- (void)testManFont
{
    [_defaults setObject:@"14.0 HelveticaNeue" forKey:@"ManFont"];
    NSFont *font = [_defaults manFont];
    XCTAssertEqualObjects(@"HelveticaNeue", font.fontName);
    XCTAssertEqual(14.0, font.pointSize);
}

- (void)testManFont_when_nil
{
    [_defaults removeObjectForKey:@"ManFont"];
    NSFont *font = [_defaults manFont];
    XCTAssertTrue(font.isFixedPitch);
    XCTAssertEqual(12.0, font.pointSize);
}

- (void)testManFont_when_missing_space
{
    [_defaults setObject:@"HelveticaNeue" forKey:@"ManFont"];
    NSFont *font = [_defaults manFont];
    XCTAssertTrue(font.isFixedPitch);
    XCTAssertEqual(12.0, font.pointSize);
}

- (void)testManFont_when_invalid_size
{
    [_defaults setObject:@"NotASize HelveticaNeue" forKey:@"ManFont"];
    NSFont *font = [_defaults manFont];
    XCTAssertEqualObjects(@"HelveticaNeue", font.fontName);
    XCTAssertEqual(12.0, font.pointSize);
}

- (void)testManFont_when_invalid_name
{
    [_defaults setObject:@"14.0 NotAFontName" forKey:@"ManFont"];
    NSFont *font = [_defaults manFont];
    XCTAssertTrue(font.isFixedPitch);
    XCTAssertEqual(12.0, font.pointSize);
}

#pragma mark - manPath

- (void)testManPath
{
    [_defaults setObject:@"/usr/man" forKey:@"ManPath"];
    XCTAssertEqualObjects(@"/usr/man", [_defaults manPath]);
}

- (void)testManPath_when_nil
{
    [_defaults removeObjectForKey:@"ManPath"];
    XCTAssertEqualObjects(@"/usr/local/man:/usr/share/man", [_defaults manPath]);
}

#pragma mark - setUp

- (void)setUp
{
    [super setUp];
    _defaults = [NSUserDefaults new];
}

@end
