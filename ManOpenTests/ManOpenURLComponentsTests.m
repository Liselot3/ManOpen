//
//  ManOpenURLComponentsTests.m
//  ManOpenTests
//
//  Created by Don McCaughey on 2/3/18.
//

#import <XCTest/XCTest.h>
#import "ManOpenURLComponents.h"
#import "ManPage.h"


@interface ManOpenURLComponentsTests : XCTestCase
@end


@implementation ManOpenURLComponentsTests

- (void)testInit
{
    ManOpenURLComponents *components = [[ManOpenURLComponents new] autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertNil(components.manPath);
}

#pragma mark - -initWithAproposKeyword:manPath:isBackground:

- (void)testInitWithAproposKeyword
{
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithAproposKeyword:@"print"
                                                                                    manPath:nil
                                                                               isBackground:NO];
    [components autorelease];
    
    XCTAssertEqualObjects(@"print", components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertNil(components.manPath);
}

- (void)testInitWithAproposKeyword_when_empty
{
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithAproposKeyword:@""
                                                                                    manPath:nil
                                                                               isBackground:NO];
    [components autorelease];

    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertNil(components.manPath);
}

- (void)testInitWithAproposKeyword_when_nil
{
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithAproposKeyword:nil
                                                                                    manPath:nil
                                                                               isBackground:NO];
    [components autorelease];

    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertNil(components.manPath);
}

- (void)testInitWithAproposKeyword_with_manpath_and_background
{
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithAproposKeyword:@"open"
                                                                                    manPath:@[ @"/usr/share" ]
                                                                               isBackground:YES];
    [components autorelease];

    XCTAssertEqualObjects(@"open", components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertTrue(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertEqual(1, components.manPath.count);
    XCTAssertEqualObjects(@"/usr/share", components.manPath.firstObject);
}

- (void)testInitWithAproposKeyword_with_empty_manpath
{
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithAproposKeyword:@"open"
                                                                                    manPath:@[]
                                                                               isBackground:YES];
    [components autorelease];

    XCTAssertEqualObjects(@"open", components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertTrue(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertNil(components.manPath);
}

#pragma mark - -initWithFilePath:isBackground:

- (void)testInitWithFilePath
{
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithFilePath:@"/usr/share/man/man1/basename.1"
                                                                         isBackground:NO];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertEqualObjects(@"/usr/share/man/man1/basename.1", components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertNil(components.manPath);
}

- (void)testInitWithFilePath_when_empty
{
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithFilePath:@""
                                                                         isBackground:NO];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertNil(components.manPath);
}

- (void)testInitWithFilePath_when_nil
{
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithFilePath:nil
                                                                         isBackground:NO];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertNil(components.manPath);
}

- (void)testInitWithFilePath_with_background
{
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithFilePath:@"/usr/share/man/man1/intro.1"
                                                                         isBackground:YES];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertEqualObjects(@"/usr/share/man/man1/intro.1", components.filePath);
    XCTAssertTrue(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertNil(components.manPath);
}

#pragma mark - -initWithManPage:manPath:isBackground:

- (void)testInitWithManPage
{
    ManPage *grep = [[[ManPage alloc] initWithName:@"grep"] autorelease];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithManPage:grep
                                                                             manPath:nil
                                                                        isBackground:NO];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage.section);
    XCTAssertEqualObjects(@"grep", components.manPage.name);
    XCTAssertNil(components.manPath);
}

- (void)testInitWithManPage_when_nil
{
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithManPage:nil
                                                                             manPath:nil
                                                                        isBackground:NO];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertNil(components.manPath);
}

- (void)testInitWithManPage_with_manpath_and_background
{
    ManPage *grep = [[[ManPage alloc] initWithName:@"grep"] autorelease];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithManPage:grep
                                                                             manPath:@[ @"/usr/share" ]
                                                                        isBackground:YES];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertTrue(components.isBackground);
    XCTAssertNil(components.manPage.section);
    XCTAssertEqualObjects(@"grep", components.manPage.name);
    XCTAssertEqual(1, components.manPath.count);
    XCTAssertEqualObjects(@"/usr/share", components.manPath.firstObject);
}

- (void)testInitWithManPage_with_empty_manpath
{
    ManPage *grep = [[[ManPage alloc] initWithName:@"grep"] autorelease];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithManPage:grep
                                                                             manPath:@[]
                                                                        isBackground:YES];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertTrue(components.isBackground);
    XCTAssertNil(components.manPage.section);
    XCTAssertEqualObjects(@"grep", components.manPage.name);
    XCTAssertNil(components.manPath);
}

#pragma mark - -initWithURL:

- (void)testInitWithURL_with_nil_url
{
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:nil];
    [components autorelease];
    XCTAssertNil(components);
}

- (void)testInitWithURL_with_empty_resource
{
    NSURL *url = [NSURL URLWithString:@"manopen:"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    XCTAssertNil(components);
}

- (void)testInitWithURL_with_empty_path
{
    NSURL *url = [NSURL URLWithString:@"manopen:/"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    XCTAssertNil(components);
}

- (void)testInitWithURL_with_empty_name
{
    NSURL *url = [NSURL URLWithString:@"manopen:///"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    XCTAssertNil(components);
}

- (void)testInitWithURL_with_wrong_url_scheme
{
    NSURL *url = [NSURL URLWithString:@"http://example.com"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    XCTAssertNil(components);
}

#pragma mark for man page

- (void)testInitWithURL_with_man_page_name
{
    NSURL *url = [NSURL URLWithString:@"manopen:///grep"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage.section);
    XCTAssertEqualObjects(@"grep", components.manPage.name);
    XCTAssertNil(components.manPath);
}

- (void)testInitWithURL_with_man_page_section_and_name
{
    NSURL *url = [NSURL URLWithString:@"manopen://3/printf"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertEqualObjects(@"3", components.manPage.section);
    XCTAssertEqualObjects(@"printf", components.manPage.name);
    XCTAssertNil(components.manPath);
}

#pragma mark for apropos search

- (void)testInitWithURL_with_apropos_keyword_search
{
    NSURL *url = [NSURL URLWithString:@"manopen://apropos/edit"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    
    XCTAssertEqualObjects(@"edit", components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertNil(components.manPath);
}

#pragma mark for file path

- (void)testInitWithURL_with_file_path
{
    NSURL *url = [NSURL URLWithString:@"manopen:/usr/local/share/man/man1/wget.1"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertEqualObjects(@"/usr/local/share/man/man1/wget.1", components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertNil(components.manPath);
}

#pragma mark for background parameter

- (void)testInitWithURL_with_background_true
{
    NSURL *url = [NSURL URLWithString:@"manopen:///grep?background=true"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertTrue(components.isBackground);
    XCTAssertNil(components.manPage.section);
    XCTAssertEqualObjects(@"grep", components.manPage.name);
    XCTAssertNil(components.manPath);
}

- (void)testInitWithURL_with_background_TRUE
{
    NSURL *url = [NSURL URLWithString:@"manopen://apropos/print?background=TRUE"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    
    XCTAssertEqualObjects(@"print", components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertTrue(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertNil(components.manPath);
}

- (void)testInitWithURL_with_background_false
{
    NSURL *url = [NSURL URLWithString:@"manopen:/usr/local/share/man/man1/wget.1?background=false"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertEqualObjects(@"/usr/local/share/man/man1/wget.1", components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertNil(components.manPath);
}

- (void)testInitWithURL_with_capitalized_background
{
    NSURL *url = [NSURL URLWithString:@"manopen:///find?Background=true"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage.section);
    XCTAssertEqualObjects(@"find", components.manPage.name);
    XCTAssertNil(components.manPath);
}

#pragma mark for MANPATH parameter

- (void)testInitWithURL_with_one_MANPATH
{
    NSURL *url = [NSURL URLWithString:@"manopen:///grep?MANPATH=/usr/man"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage.section);
    XCTAssertEqualObjects(@"grep", components.manPage.name);
    XCTAssertEqual(1, components.manPath.count);
    XCTAssertEqualObjects(@"/usr/man", components.manPath.firstObject);
}

- (void)testInitWithURL_with_two_MANPATH_entries
{
    NSURL *url = [NSURL URLWithString:@"manopen:///grep?MANPATH=/usr/man:/usr/local/man"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage.section);
    XCTAssertEqualObjects(@"grep", components.manPage.name);
    XCTAssertEqual(2, components.manPath.count);
    XCTAssertEqualObjects(@"/usr/man", components.manPath.firstObject);
    XCTAssertEqualObjects(@"/usr/local/man", [components.manPath objectAtIndex:1]);
}

- (void)testInitWithURL_with_percent_encoded_MANPATH_entries
{
    NSURL *url = [NSURL URLWithString:@"manopen://3/printf?MANPATH=%2Fusr%2Fman%3A%2Fusr%2Flocal%2Fman%3A%2Fusr%2Fshare"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertEqualObjects(@"3", components.manPage.section);
    XCTAssertEqualObjects(@"printf", components.manPage.name);
    XCTAssertEqual(3, components.manPath.count);
    XCTAssertEqualObjects(@"/usr/man", components.manPath.firstObject);
    XCTAssertEqualObjects(@"/usr/local/man", [components.manPath objectAtIndex:1]);
    XCTAssertEqualObjects(@"/usr/share", [components.manPath objectAtIndex:2]);
}

- (void)testInitWithURL_with_lower_case_manpath
{
    NSURL *url = [NSURL URLWithString:@"manopen:///basename?manpath=/usr/man"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertFalse(components.isBackground);
    XCTAssertNil(components.manPage.section);
    XCTAssertEqualObjects(@"basename", components.manPage.name);
    XCTAssertNil(components.manPath);
}

#pragma mark for multiple parameters

- (void)testInitWithURL_with_everything_for_man_page
{
    NSURL *url = [NSURL URLWithString:@"manopen://1/grep?MANPATH=/usr/man:/usr/local/man&background=true"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertNil(components.filePath);
    XCTAssertTrue(components.isBackground);
    XCTAssertEqualObjects(@"1", components.manPage.section);
    XCTAssertEqualObjects(@"grep", components.manPage.name);
    XCTAssertEqual(2, components.manPath.count);
    XCTAssertEqualObjects(@"/usr/man", components.manPath.firstObject);
    XCTAssertEqualObjects(@"/usr/local/man", [components.manPath objectAtIndex:1]);
}

- (void)testInitWithURL_with_extra_query_items
{
    NSURL *url = [NSURL URLWithString:@"manopen:/usr/local/share/man/man1/wget.1?background=true&foo=bar&MANPATH=/usr/man:/usr/local/man"];
    ManOpenURLComponents *components = [[ManOpenURLComponents alloc] initWithURL:url];
    [components autorelease];
    
    XCTAssertNil(components.aproposKeyword);
    XCTAssertEqualObjects(@"/usr/local/share/man/man1/wget.1", components.filePath);
    XCTAssertTrue(components.isBackground);
    XCTAssertNil(components.manPage);
    XCTAssertNil(components.manPath);
}

@end
